/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int amountOfTime(TreeNode root, int start) {
        
            HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();

            // convert tree to graph to traverse upwards

            Queue<TreeNode> queue = new LinkedList<>();

            queue.add(root);

            while(!queue.isEmpty()){
                int size = queue.size();

                for(int i =0;i<size;i++){
                TreeNode parent = queue.remove();

                if(parent.left!=null){
                                map.computeIfAbsent(parent.val,(k)->new ArrayList<>()).add(parent.left.val);
                                map.computeIfAbsent(parent.left.val,(k)->new ArrayList<>()).add(parent.val);
                                queue.add(parent.left);

                }
                if(parent.right!=null){
                     map.computeIfAbsent(parent.val,(k)->new ArrayList<>()).add(parent.right.val);
                     map.computeIfAbsent(parent.right.val,(k)->new ArrayList<>()).add(parent.val);
                     queue.add(parent.right);
                }
                }
            }

            // convetsion succesfull now simple bfs traversal to count time taken for infection of all nodes;

            boolean[] visited = new boolean[(int) 1e5+1];

           Queue<Integer> q = new LinkedList<>();

            int t = 0;
            q.add(start);
            visited[start] = true;

            while(!q.isEmpty()){
                int s = q.size();
               
                boolean inf = false;
                for(int i = 0;i<s;i++){
                    int p = q.remove();
                    if(map.containsKey(p)){
                        for(int elem : map.get(p)){
                            if(!visited[elem]){
                                visited[elem] = true;
                                inf  = true;
                                q.add(elem);
                            }
                        }
                }
                }
                if(inf) t++;
            }
    return t;
    }
}
